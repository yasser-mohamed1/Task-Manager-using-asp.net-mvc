@model IEnumerable<TaskManager.Models.TaskItem>
@{
    ViewData["Title"] = "My Tasks";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1>My Tasks</h1>
    <a asp-action="Create" class="btn btn-primary">
        <i class="bi bi-plus-circle"></i> New Task
    </a>
</div>

@if (Model.Any())
{
    <div class="row">
        @foreach (var task in Model)
        {
            <div class="col-md-6 col-lg-4 mb-3">
                <div class="card h-100 @(task.IsCompleted ? "bg-light" : "")">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-start mb-2">
                            <h5 class="card-title @(task.IsCompleted ? "text-decoration-line-through text-muted" : "")">
                                @task.Title
                            </h5>
                            <div class="dropdown">
                                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                    <i class="bi bi-three-dots"></i>
                                </button>
                                <ul class="dropdown-menu">
                                    <li><a class="dropdown-item" asp-action="Details" asp-route-id="@task.Id">
                                        <i class="bi bi-eye"></i> View
                                    </a></li>
                                    <li><a class="dropdown-item" asp-action="Edit" asp-route-id="@task.Id">
                                        <i class="bi bi-pencil"></i> Edit
                                    </a></li>
                                    <li><hr class="dropdown-divider"></li>
                                    <li>
                                        <form asp-action="Delete" asp-route-id="@task.Id" method="post" class="d-inline">
                                            <button type="submit" class="dropdown-item text-danger" 
                                                    onclick="return confirm('Are you sure you want to delete this task?')">
                                                <i class="bi bi-trash"></i> Delete
                                            </button>
                                        </form>
                                    </li>
                                </ul>
                            </div>
                        </div>
                        
                        @if (!string.IsNullOrEmpty(task.Description))
                        {
                            <p class="card-text text-muted">@task.Description</p>
                        }
                        
                        <div class="mb-2">
                            <span class="badge bg-@(GetPriorityColor(task.Priority)) me-2">
                                @task.Priority Priority
                            </span>
                            
                            @if (task.Category != null)
                            {
                                <span class="badge" style="background-color: @task.Category.Color">
                                    @task.Category.Name
                                </span>
                            }
                        </div>
                        
                        @if (task.DueDate.HasValue)
                        {
                            <small class="text-muted d-block mb-2">
                                <i class="bi bi-calendar"></i>
                                Due: @task.DueDate.Value.ToString("MMM dd, yyyy HH:mm")
                                @if (task.DueDate < DateTime.Now && !task.IsCompleted)
                                {
                                    <span class="text-danger">(Overdue)</span>
                                }
                            </small>
                        }
                        
                        <div class="d-flex justify-content-between align-items-center">
                            <small class="text-muted">
                                Created: @task.CreatedAt.ToString("MMM dd")
                            </small>
                            
                            <form asp-action="ToggleStatus" asp-route-id="@task.Id" method="post" class="d-inline">
                                <button type="submit" class="btn btn-sm @(task.IsCompleted ? "btn-warning" : "btn-success")">
                                    @if (task.IsCompleted)
                                    {
                                        <i class="bi bi-arrow-counterclockwise">Reopen</i>
                                    }
                                    else
                                    {
                                        <i class="bi bi-check">Complete</i>
                                    }
                                </button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <div class="text-center py-5">
        <i class="bi bi-list-task display-1 text-muted"></i>
        <h3 class="mt-3">No tasks yet</h3>
        <p class="text-muted">Create your first task to get started!</p>
        <a asp-action="Create" class="btn btn-primary">
            <i class="bi bi-plus-circle"></i> Create Task
        </a>
    </div>
}

@functions {
    private string GetPriorityColor(TaskManager.Models.TaskPriority priority)
    {
        return priority switch
        {
            TaskManager.Models.TaskPriority.Low => "secondary",
            TaskManager.Models.TaskPriority.Medium => "info",
            TaskManager.Models.TaskPriority.High => "warning",
            TaskManager.Models.TaskPriority.Critical => "danger",
            _ => "secondary"
        };
    }
}