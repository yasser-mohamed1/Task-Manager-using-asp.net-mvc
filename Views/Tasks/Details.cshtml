@model TaskManager.Models.TaskItem
@{
    ViewData["Title"] = "Task Details";
}

<div class="row">
    <div class="col-md-8 offset-md-2">
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h3><i class="bi bi-info-circle"></i> Task Details</h3>
                <div>
                    <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-outline-primary btn-sm">
                        <i class="bi bi-pencil"></i> Edit
                    </a>
                    <form asp-action="Delete" asp-route-id="@Model.Id" method="post" class="d-inline">
                        <button type="submit" class="btn btn-outline-danger btn-sm"
                                onclick="return confirm('Are you sure you want to delete this task?')">
                            <i class="bi bi-trash"></i> Delete
                        </button>
                    </form>
                </div>
            </div>
            <div class="card-body">
                <div class="row mb-3">
                    <div class="col-sm-3">
                        <strong>Title:</strong>
                    </div>
                    <div class="col-sm-9">
                        <span class="@(Model.IsCompleted ? "text-decoration-line-through text-muted" : "")">
                            @Model.Title
                        </span>
                        @if (Model.IsCompleted)
                        {
                            <span class="badge bg-success ms-2">Completed</span>
                        }
                    </div>
                </div>

                @if (!string.IsNullOrEmpty(Model.Description))
                {
                    <div class="row mb-3">
                        <div class="col-sm-3">
                            <strong>Description:</strong>
                        </div>
                        <div class="col-sm-9">
                            @Model.Description
                        </div>
                    </div>
                }

                <div class="row mb-3">
                    <div class="col-sm-3">
                        <strong>Priority:</strong>
                    </div>
                    <div class="col-sm-9">
                        <span class="badge bg-@(GetPriorityColor(Model.Priority))">
                            @Model.Priority Priority
                        </span>
                    </div>
                </div>

                @if (Model.Category != null)
                {
                    <div class="row mb-3">
                        <div class="col-sm-3">
                            <strong>Category:</strong>
                        </div>
                        <div class="col-sm-9">
                            <span class="badge" style="background-color: @Model.Category.Color">
                                @Model.Category.Name
                            </span>
                        </div>
                    </div>
                }

                <div class="row mb-3">
                    <div class="col-sm-3">
                        <strong>Created:</strong>
                    </div>
                    <div class="col-sm-9">
                        @Model.CreatedAt.ToString("MMMM dd, yyyy 'at' HH:mm")
                    </div>
                </div>

                @if (Model.DueDate.HasValue)
                {
                    <div class="row mb-3">
                        <div class="col-sm-3">
                            <strong>Due Date:</strong>
                        </div>
                        <div class="col-sm-9">
                            @Model.DueDate.Value.ToString("MMMM dd, yyyy 'at' HH:mm")
                            @if (Model.DueDate < DateTime.UtcNow && !Model.IsCompleted)
                            {
                                <span class="badge bg-danger ms-2">Overdue</span>
                            }
                        </div>
                    </div>
                }

                <div class="row mb-3">
                    <div class="col-sm-3">
                        <strong>Status:</strong>
                    </div>
                    <div class="col-sm-9">
                        @if (Model.IsCompleted)
                        {
                            <span class="badge bg-success">Completed</span>
                        }
                        else
                        {
                            <span class="badge bg-warning">Pending</span>
                        }
                    </div>
                </div>

                <hr>

                <div class="d-flex justify-content-between">
                    <a asp-action="Index" class="btn btn-secondary">
                        <i class="bi bi-arrow-left"></i> Back to Tasks
                    </a>

                    <form asp-action="ToggleStatus" asp-route-id="@Model.Id" method="post" class="d-inline">
                        <button type="submit" class="btn @(Model.IsCompleted ? "btn-warning" : "btn-success")">
                            @if (Model.IsCompleted)
                            {
                                <i class="bi bi-arrow-counterclockwise">
                                    Mark as Pending
                                </i>
                            }
                            else
                            {
                                <i class="bi bi-check">
                                    Mark as Complete
                                </i>
                            }
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@functions {
    private string GetPriorityColor(TaskManager.Models.TaskPriority priority)
    {
        return priority switch
        {
            TaskManager.Models.TaskPriority.Low => "secondary",
            TaskManager.Models.TaskPriority.Medium => "info",
            TaskManager.Models.TaskPriority.High => "warning",
            TaskManager.Models.TaskPriority.Critical => "danger",
            _ => "secondary"
        };
    }
}
